# Sugerencia: elimina la línea "version:" (ya es obsoleta)
services:
  sqlserver:
    image: mcr.microsoft.com/mssql/server:2022-latest
    container_name: sqlserver
    environment:
      - ACCEPT_EULA=Y
      - SA_PASSWORD=${SA_PASSWORD}
      - MSSQL_PID=Developer
    ports:
      - "1433:1433"
    volumes:
      - mssql-data:/var/opt/mssql
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "/opt/mssql-tools18/bin/sqlcmd", "-S", "localhost,1433", "-U", "sa", "-P", "${SA_PASSWORD}", "-C", "-Q", "SELECT 1"]
      interval: 5s
      timeout: 3s
      retries: 20

  web:
    build:
      context: ./Pacho
      dockerfile: Dockerfile
    container_name: pacho
    depends_on:
      sqlserver:
        condition: service_healthy
    environment:
      # Usa el nombre del servicio "sqlserver" como host
      - ConnectionStrings__DefaultConnection=Server=sqlserver,1433;Database=${DB_NAME};User Id=sa;Password=${SA_PASSWORD};TrustServerCertificate=True;Encrypt=True;
      - ASPNETCORE_ENVIRONMENT=Production
      - EmailSettings__SmtpServer=${MAIL_HOST}
      - EmailSettings__Port=${MAIL_PORT}
      - EmailSettings__UserName=${MAIL_USER}
      - EmailSettings__Password=${MAIL_PASS}
    ports:
      - "8080:8080"
    restart: unless-stopped


  bot:
    build:
      context: ./bot
      dockerfile: Dockerfile
    container_name: bot
    depends_on:
      sqlserver:
        condition: service_healthy
    # Inyecta variables del archivo ./bot/.env al contenedor
    env_file:
      - ./bot/.env
    # (opcional) Si quieres ver logs del bot por puerto, expón lo que necesites
    # ports:
    #   - "9000:9000"
    restart: unless-stopped

volumes:
  mssql-data:
