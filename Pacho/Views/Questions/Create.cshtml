@model Pacho.Models.QuestionFormViewModel
@{
    ViewData["Title"] = "Crear Nueva Pregunta - PACHO Asistente";
}
<link rel="stylesheet" href="~/css/Questions/Create.css">
<div class="container-fluid py-4">
    <div class="row">
        <div class="col-12">
            <div class="card pacho-card shadow-lg">
                <div class="card-header pacho-card-header">
                    <div class="d-flex justify-content-between align-items-center">
                        <div class="d-flex align-items-center">
                            <i class="fas fa-plus-circle me-3 fs-4"></i>
                            <div>
                                <h4 class="mb-0 text-white">Crear Nueva Pregunta</h4>
                                <small class="text-white-50">PACHO-Asistente • Agricultura Inteligente</small>
                            </div>
                        </div>
                        <a asp-action="Index" class="btn btn-pacho-light">
                            <i class="fas fa-arrow-left me-2"></i>
                            Volver al Listado
                        </a>
                    </div>
                </div>

                <div class="card-body">
                    <form asp-action="Create" method="post" id="questionForm">
                        @Html.AntiForgeryToken()

                        @if (ViewData.ModelState.Values.Any(v => v.Errors.Count > 0))
                        {
                            <div class="alert alert-danger border-0 shadow-sm" role="alert">
                                <div class="d-flex align-items-start">
                                    <i class="fas fa-exclamation-triangle me-2 fs-5 mt-1"></i>
                                    <div>
                                        <h6 class="alert-heading">Por favor corrige los siguientes errores:</h6>
                                        <ul class="mb-0">
                                            @foreach (var error in ViewData.ModelState.Values.SelectMany(v => v.Errors))
                                            {
                                                <li>@error.ErrorMessage</li>
                                            }
                                        </ul>
                                    </div>
                                </div>
                            </div>
                        }

                        <!-- Panel de validación en tiempo real -->
                        <div class="validation-panel mb-4" id="validationPanel" style="display: none;">
                            <div class="alert alert-warning border-0">
                                <div class="d-flex align-items-center">
                                    <i class="fas fa-info-circle me-2"></i>
                                    <div id="validationMessage"></div>
                                </div>
                            </div>
                        </div>

                        <!-- Panel de progreso -->
                        <div class="progress-panel mb-4">
                            <div class="card border-success">
                                <div class="card-body p-3">
                                    <div class="d-flex align-items-center justify-content-between">
                                        <div class="d-flex align-items-center">
                                            <i class="fas fa-seedling text-success me-2"></i>
                                            <span class="fw-bold">Progreso de la pregunta</span>
                                        </div>
                                        <div class="d-flex align-items-center gap-3">
                                            <div class="progress-item">
                                                <i class="fas fa-edit text-muted me-1"></i>
                                                <span id="questionStatus" class="text-muted">Sin texto</span>
                                            </div>
                                            <div class="progress-item">
                                                <i class="fas fa-list text-muted me-1"></i>
                                                <span id="answersStatus" class="text-muted">0/2 respuestas</span>
                                            </div>
                                            <div class="progress-item">
                                                <i class="fas fa-check text-muted me-1"></i>
                                                <span id="correctStatus" class="text-muted">0/1 correctas</span>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="row">
                            <!-- Columna de la pregunta -->
                            <div class="col-lg-6">
                                <div class="card border-pacho mb-4">
                                    <div class="card-header text-white">
                                        <h5 class="mb-0">
                                            <i class="fas fa-question me-2"></i>
                                            Información de la Pregunta
                                        </h5>
                                    </div>
                                    <div class="card-body">
                                        <div class="mb-3">
                                            <label asp-for="QuestionText" class="form-label fw-bold">
                                                <i class="fas fa-edit me-1"></i>
                                                Texto de la Pregunta
                                            </label>
                                            <textarea asp-for="QuestionText"
                                                      class="form-control form-control-lg"
                                                      rows="4"
                                                      placeholder="Escribe aquí el texto de tu pregunta sobre agricultura..."
                                                      maxlength="1000"></textarea>
                                            <span asp-validation-for="QuestionText" class="text-danger"></span>
                                            <small class="form-text text-muted">
                                                Máximo 1000 caracteres. <span id="charCount">0</span>/1000
                                            </small>
                                        </div>

                                        <div class="mb-3">
                                            <label asp-for="Order" class="form-label fw-bold">
                                                <i class="fas fa-sort-numeric-up me-1"></i>
                                                Orden de la Pregunta
                                            </label>
                                            <div class="input-group">
                                                <input asp-for="Order"
                                                       type="number"
                                                       class="form-control form-control-lg"
                                                       min="1"
                                                       max="999"
                                                       placeholder="Ej: 1, 2, 3..."
                                                       id="orderInput">
                                                <button type="button" class="btn btn-sugest" id="suggestOrderBtn" title="Sugerir siguiente orden">
                                                    <i class="fas fa-magic"></i>
                                                </button>
                                            </div>
                                            <span asp-validation-for="Order" class="text-danger"></span>
                                            <small class="form-text text-muted">
                                                Define el orden en que aparecerá esta pregunta
                                            </small>
                                        </div>

                                        <div class="alert alert-info border-0">
                                            <i class="fas fa-seedling me-2"></i>
                                            <strong>Guía para crear preguntas:</strong>
                                            <ul class="mb-0 mt-2">
                                                <li>Sé específico y claro en el texto</li>
                                                <li>Mínimo 2 respuestas requeridas</li>
                                                <li>Al menos 1 respuesta debe ser correcta</li>
                                                <li>Puedes agregar hasta 8 respuestas</li>
                                                <li>Relaciona con agricultura inteligente</li>
                                            </ul>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <!-- Columna de las respuestas -->
                            <div class="col-lg-6">
                                <div class="card">
                                    <div class="card-header text-white">
                                        <div class="d-flex justify-content-between align-items-center">
                                            <div>
                                                <h5 class="mb-0">
                                                    <i class="fas fa-list me-2"></i>
                                                    Respuestas de la Pregunta
                                                </h5>
                                                <small class="text-white-50">
                                                    <span id="answersCount">0</span> respuestas completadas
                                                </small>
                                            </div>
                                            <button type="button" class="btn btn-sugest btn-sm" id="addAnswerBtn">
                                                <i class="fas fa-plus me-1"></i>
                                                Agregar
                                            </button>
                                        </div>
                                    </div>
                                    <div class="card-body">
                                        <div id="answersContainer">
                                            @for (int i = 0; i < Model.Answers.Count; i++)
                                            {
                                                <div class="answer-row mb-3" data-index="@i">
                                                    <div class="card border-secondary answer-empty">
                                                        <div class="card-body p-3">
                                                            <div class="d-flex justify-content-between align-items-start mb-2">
                                                                <label class="fw-bold text-secondary">
                                                                    Respuesta @(i + 1)
                                                                    @if (i < 2)
                                                                    {
                                                                        <span class="badge bg-warning text-dark ms-1">Requerida</span>
                                                                    }
                                                                    else
                                                                    {
                                                                        <span class="badge bg-secondary ms-1">Opcional</span>
                                                                    }
                                                                </label>
                                                                @if (i >= 2)
                                                                {
                                                                    <button type="button" class="btn btn-outline-danger btn-sm remove-answer">
                                                                        <i class="fas fa-times"></i>
                                                                    </button>
                                                                }
                                                            </div>

                                                            <div class="mb-2">
                                                                <input asp-for="Answers[i].AnswerText"
                                                                       class="form-control answer-text-input"
                                                                       placeholder="@(i < 2 ? "Respuesta requerida..." : "Respuesta opcional...")"
                                                                       maxlength="500">
                                                                <span asp-validation-for="Answers[i].AnswerText" class="text-danger"></span>
                                                            </div>

                                                            <div class="form-check">
                                                                <input asp-for="Answers[i].IsCorrect"
                                                                       class="form-check-input correct-checkbox"
                                                                       type="checkbox">
                                                                <label asp-for="Answers[i].IsCorrect" class="form-check-label fw-bold text-success">
                                                                    <i class="fas fa-check me-1"></i>
                                                                    ¿Es respuesta correcta?
                                                                </label>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                            }
                                        </div>

                                        <div class="alert alert-success border-0">
                                            <i class="fas fa-lightbulb me-2"></i>
                                            <strong>Tip:</strong> Las primeras 2 respuestas son obligatorias. Las adicionales son opcionales pero enriquecen la pregunta.
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Botones de acción -->
                        <div class="row mt-4">
                            <div class="col-12">
                                <div class="d-flex justify-content-between">
                                    <a asp-action="Index" class="btn btn-secondary btn-lg">
                                        <i class="fas fa-times me-2"></i>
                                        Cancelar
                                    </a>
                                    <button type="submit" class="btn btn-pacho btn-lg" id="submitBtn" disabled>
                                        <i class="fas fa-save me-2"></i>
                                        <span id="submitText">Crear Pregunta</span>
                                    </button>
                                </div>
                            </div>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>
<script>
    document.addEventListener('DOMContentLoaded', function () {
        let answerIndex = @Model.Answers.Count;
        const minAnswers = 2;
        const minCorrect = 1;

        // Contador de caracteres
        const questionText = document.getElementById('QuestionText');
        const charCount = document.getElementById('charCount');

        function updateCharCount() {
            if (questionText) {
                const count = questionText.value.length;
                charCount.textContent = count;
                charCount.className = count > 900 ? 'text-danger' : count > 700 ? 'text-warning' : 'text-muted';
            }
        }

        if (questionText) {
            questionText.addEventListener('input', updateCharCount);
            updateCharCount();
        }

        // Sugerir siguiente orden automáticamente
        async function suggestNextOrder() {
            try {
                const response = await fetch('/Questions/GetNextOrder');
                const nextOrder = await response.json();
                const orderInput = document.getElementById('orderInput');
                if (orderInput && !orderInput.value) {
                    orderInput.value = nextOrder;
                }
            } catch (error) {
                console.error('Error getting next order:', error);
            }
        }

        // Botón para sugerir orden
        document.getElementById('suggestOrderBtn').addEventListener('click', async function () {
            try {
                const response = await fetch('/Questions/GetNextOrder');
                const nextOrder = await response.json();
                document.getElementById('orderInput').value = nextOrder;

                // Feedback visual
                this.innerHTML = '<i class="fas fa-check text-success"></i>';
                setTimeout(() => {
                    this.innerHTML = '<i class="fas fa-magic"></i>';
                }, 1500);
            } catch (error) {
                console.error('Error suggesting order:', error);
            }
        });

        // Actualizar panel de progreso
        function updateProgressPanel() {
            const questionStatus = document.getElementById('questionStatus');
            const answersStatus = document.getElementById('answersStatus');
            const correctStatus = document.getElementById('correctStatus');

            const questionHasText = questionText.value.trim().length > 0;
            const answersWithText = getAnswersWithText();
            const correctAnswers = getCorrectAnswers();

            // Estado de la pregunta
            if (questionHasText) {
                questionStatus.textContent = 'Completado';
                questionStatus.className = 'status-complete fw-bold';
                questionStatus.previousElementSibling.className = 'fas fa-edit text-success me-1';
            } else {
                questionStatus.textContent = 'Sin texto';
                questionStatus.className = 'text-muted';
                questionStatus.previousElementSibling.className = 'fas fa-edit text-muted me-1';
            }

            // Estado de las respuestas
            if (answersWithText.length >= minAnswers) {
                answersStatus.textContent = `${answersWithText.length}/${minAnswers} respuestas`;
                answersStatus.className = 'status-complete fw-bold';
                answersStatus.previousElementSibling.className = 'fas fa-list text-success me-1';
            } else {
                answersStatus.textContent = `${answersWithText.length}/${minAnswers} respuestas`;
                answersStatus.className = 'status-warning fw-bold';
                answersStatus.previousElementSibling.className = 'fas fa-list text-warning me-1';
            }

            // Estado de respuestas correctas
            if (correctAnswers.length >= minCorrect) {
                correctStatus.textContent = `${correctAnswers.length}/${minCorrect} correctas`;
                correctStatus.className = 'status-complete fw-bold';
                correctStatus.previousElementSibling.className = 'fas fa-check text-success me-1';
            } else {
                correctStatus.textContent = `${correctAnswers.length}/${minCorrect} correctas`;
                correctStatus.className = 'status-warning fw-bold';
                correctStatus.previousElementSibling.className = 'fas fa-check text-warning me-1';
            }
        }

        // Validación de respuestas en tiempo real
        function validateAnswers() {
            const answersWithText = getAnswersWithText();
            const correctAnswers = getCorrectAnswers();
            const totalAnswers = answersWithText.length;
            const totalCorrect = correctAnswers.length;
            const questionHasText = questionText.value.trim().length > 0;

            const validationPanel = document.getElementById('validationPanel');
            const validationMessage = document.getElementById('validationMessage');
            const submitBtn = document.getElementById('submitBtn');
            const submitText = document.getElementById('submitText');
            const answersCount = document.getElementById('answersCount');

            // Actualizar contador
            answersCount.textContent = totalAnswers;

            // Validar mínimos
            const hasMinAnswers = totalAnswers >= minAnswers;
            const hasMinCorrect = totalCorrect >= minCorrect;
            const isValid = questionHasText && hasMinAnswers && hasMinCorrect;

            // Mostrar/ocultar panel de validación
            if (!isValid) {
                const messages = [];
                if (!questionHasText) {
                    messages.push(`<strong>📝 Texto de pregunta:</strong> Debes escribir el texto de la pregunta`);
                }
                if (!hasMinAnswers) {
                    messages.push(`<strong>📋 Respuestas:</strong> Necesitas al menos ${minAnswers} respuestas (tienes ${totalAnswers})`);
                }
                if (!hasMinCorrect) {
                    messages.push(`<strong>✅ Respuesta correcta:</strong> Necesitas al menos ${minCorrect} respuesta correcta (tienes ${totalCorrect})`);
                }

                validationMessage.innerHTML = messages.join('<br>');
                validationPanel.style.display = 'block';
                validationPanel.querySelector('.alert').className = 'alert alert-warning border-0';
            } else {
                validationPanel.style.display = 'none';
            }

            // Habilitar/deshabilitar botón de envío
            submitBtn.disabled = !isValid;

            if (isValid) {
                submitText.textContent = `Crear Pregunta (${totalAnswers} respuestas)`;
            } else {
                submitText.textContent = 'Completa los requisitos';
            }

            // Actualizar clases visuales de las tarjetas
            updateAnswerCards();
            updateProgressPanel();
        }

        function getAnswersWithText() {
            const inputs = document.querySelectorAll('.answer-text-input');
            return Array.from(inputs).filter(input => input.value.trim() !== '');
        }

        function getCorrectAnswers() {
            const checkboxes = document.querySelectorAll('.correct-checkbox:checked');
            return Array.from(checkboxes).filter(checkbox => {
                const row = checkbox.closest('.answer-row');
                const textInput = row.querySelector('.answer-text-input');
                return textInput.value.trim() !== '';
            });
        }

        function updateAnswerCards() {
            document.querySelectorAll('.answer-row').forEach((row, index) => {
                const textInput = row.querySelector('.answer-text-input');
                const card = row.querySelector('.card');
                const isRequired = index < 2;

                // Remover todas las clases de estado
                card.classList.remove('answer-empty', 'answer-filled', 'answer-required');

                if (textInput.value.trim() !== '') {
                    card.classList.add('answer-filled');
                } else if (isRequired) {
                    card.classList.add('answer-required');
                } else {
                    card.classList.add('answer-empty');
                }
            });
        }

        // Event listeners
        document.addEventListener('input', function (e) {
            if (e.target.classList.contains('answer-text-input') || e.target.id === 'QuestionText') {
                validateAnswers();
            }
        });

        document.addEventListener('change', function (e) {
            if (e.target.classList.contains('correct-checkbox')) {
                validateAnswers();
            }
        });

        // Agregar nueva respuesta
        document.getElementById('addAnswerBtn').addEventListener('click', function () {
            if (answerIndex >= 8) {
                alert('Máximo 8 respuestas permitidas por pregunta.');
                return;
            }

            const container = document.getElementById('answersContainer');
            const isRequired = answerIndex < 2;
            const badgeClass = isRequired ? 'bg-warning text-dark' : 'bg-secondary';
            const badgeText = isRequired ? 'Requerida' : 'Opcional';
            const placeholder = isRequired ? 'Respuesta requerida...' : 'Respuesta opcional...';

            const newAnswerHtml = `
                <div class="answer-row mb-3" data-index="${answerIndex}">
                    <div class="card border-secondary ${isRequired ? 'answer-required' : 'answer-empty'}">
                        <div class="card-body p-3">
                            <div class="d-flex justify-content-between align-items-start mb-2">
                                <label class="fw-bold text-secondary">
                                    Respuesta ${answerIndex + 1}
                                    <span class="badge ${badgeClass} ms-1">${badgeText}</span>
                                </label>
                                ${answerIndex >= 2 ? `
                                <button type="button" class="btn btn-outline-danger btn-sm remove-answer">
                                    <i class="fas fa-times"></i>
                                </button>
                                ` : ''}
                            </div>

                            <div class="mb-2">
                                <input name="Answers[${answerIndex}].AnswerText"
                                       class="form-control answer-text-input"
                                       placeholder="${placeholder}"
                                       maxlength="500">
                            </div>

                            <div class="form-check">
                                <input name="Answers[${answerIndex}].IsCorrect"
                                       class="form-check-input correct-checkbox"
                                       type="checkbox"
                                       value="true">
                                <input name="Answers[${answerIndex}].IsCorrect" type="hidden" value="false">
                                <label class="form-check-label fw-bold text-success">
                                    <i class="fas fa-check me-1"></i>
                                    ¿Es respuesta correcta?
                                </label>
                            </div>
                        </div>
                    </div>
                </div>
            `;

            container.insertAdjacentHTML('beforeend', newAnswerHtml);
            answerIndex++;
            updateAnswerLabels();
            validateAnswers();

            // Scroll suave hacia la nueva respuesta
            const newRow = container.lastElementChild;
            newRow.scrollIntoView({ behavior: 'smooth', block: 'nearest' });

            // Focus en el input de la nueva respuesta
            const newInput = newRow.querySelector('.answer-text-input');
            setTimeout(() => newInput.focus(), 300);
        });

        // Eliminar respuesta
        document.addEventListener('click', function (e) {
            if (e.target.closest('.remove-answer')) {
                const answerRow = e.target.closest('.answer-row');
                const textInput = answerRow.querySelector('.answer-text-input');

                // Confirmar eliminación si tiene contenido
                if (textInput.value.trim() !== '') {
                    const confirmDelete = confirm(`¿Eliminar esta respuesta?\n\n"${textInput.value.substring(0, 60)}${textInput.value.length > 60 ? '...' : ''}"`);
                    if (!confirmDelete) return;
                }

                answerRow.remove();
                updateAnswerLabels();
                validateAnswers();
            }
        });

        // Actualizar etiquetas de respuestas
        function updateAnswerLabels() {
            const answers = document.querySelectorAll('.answer-row');
            answers.forEach((answer, index) => {
                const label = answer.querySelector('label');
                const badge = answer.querySelector('.badge');

                if (label) {
                    const isRequired = index < 2;
                    label.innerHTML = `
                        Respuesta ${index + 1}
                        <span class="badge ${isRequired ? 'bg-warning text-dark' : 'bg-secondary'} ms-1">
                            ${isRequired ? 'Requerida' : 'Opcional'}
                        </span>
                    `;
                }
            });
        }

        // Validación de orden único
        const orderInput = document.getElementById('orderInput');
        if (orderInput) {
            orderInput.addEventListener('blur', async function () {
                const order = parseInt(this.value);

                if (order && order > 0) {
                    try {
                        const response = await fetch(`/Questions/ValidateOrder?order=${order}`);
                        const isValid = await response.json();

                        let feedback = document.getElementById('orderFeedback');
                        if (!feedback) {
                            feedback = document.createElement('div');
                            feedback.id = 'orderFeedback';
                            feedback.className = 'text-danger small mt-1';
                            this.parentNode.appendChild(feedback);
                        }

                        if (!isValid) {
                            feedback.textContent = 'Este orden ya está en uso por otra pregunta.';
                            this.classList.add('is-invalid');
                        } else {
                            feedback.textContent = '';
                            this.classList.remove('is-invalid');
                            this.classList.add('is-valid');
                        }
                    } catch (error) {
                        console.error('Error validating order:', error);
                    }
                }
            });
        }

        // Validación antes de enviar
        document.getElementById('questionForm').addEventListener('submit', function (e) {
            const answersWithText = getAnswersWithText();
            const correctAnswers = getCorrectAnswers();
            const questionHasText = questionText.value.trim().length > 0;

            let hasError = false;
            let errorMessages = [];

            if (!questionHasText) {
                errorMessages.push('Debe escribir el texto de la pregunta.');
                hasError = true;
            }

            if (answersWithText.length < minAnswers) {
                errorMessages.push(`Debe proporcionar al menos ${minAnswers} respuestas con texto. Actualmente tienes ${answersWithText.length}.`);
                hasError = true;
            }

            if (correctAnswers.length < minCorrect) {
                errorMessages.push(`Debe marcar al menos ${minCorrect} respuesta como correcta. Actualmente tienes ${correctAnswers.length}.`);
                hasError = true;
            }

            if (hasError) {
                alert('❌ No se puede crear la pregunta:\n\n' + errorMessages.join('\n'));
                e.preventDefault();
            } else {
                // Mostrar loading en el botón
                const submitBtn = document.getElementById('submitBtn');
                const originalText = submitBtn.innerHTML;
                submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i>Creando...';
                submitBtn.disabled = true;

                // Si hay error en el servidor, restaurar el botón
                setTimeout(() => {
                    if (submitBtn.disabled) {
                        submitBtn.innerHTML = originalText;
                        submitBtn.disabled = false;
                    }
                }, 10000);
            }
        });

        // Atajos de teclado
        document.addEventListener('keydown', function (e) {
            if (e.ctrlKey && e.key === 'Enter') {
                const submitBtn = document.getElementById('submitBtn');
                if (!submitBtn.disabled) {
                    submitBtn.click();
                }
            }

            // Ctrl + N para nueva respuesta
            if (e.ctrlKey && e.key === 'n') {
                e.preventDefault();
                document.getElementById('addAnswerBtn').click();
            }
        });

        // Auto-save en localStorage (borrador)
        let autoSaveTimeout;
        function autoSaveDraft() {
            clearTimeout(autoSaveTimeout);
            autoSaveTimeout = setTimeout(() => {
                try {
                    const draft = {
                        questionText: questionText.value,
                        order: document.getElementById('orderInput').value,
                        answers: Array.from(document.querySelectorAll('.answer-text-input')).map((input, index) => ({
                            text: input.value,
                            isCorrect: document.querySelectorAll('.correct-checkbox')[index]?.checked || false
                        })),
                        timestamp: new Date().toISOString()
                    };

                    localStorage.setItem('pacho_question_draft', JSON.stringify(draft));
                    console.log('Borrador guardado automáticamente');
                } catch (error) {
                    console.error('Error guardando borrador:', error);
                }
            }, 5000); // Guardar cada 5 segundos
        }

        // Cargar borrador si existe
        function loadDraft() {
            try {
                const draft = localStorage.getItem('pacho_question_draft');
                if (draft) {
                    const draftData = JSON.parse(draft);
                    const draftDate = new Date(draftData.timestamp);
                    const hoursSinceDraft = (new Date() - draftDate) / (1000 * 60 * 60);

                    // Solo cargar si el borrador es de menos de 24 horas
                    if (hoursSinceDraft < 24) {
                        const loadDraftConfirm = confirm(
                            `Se encontró un borrador guardado el ${draftDate.toLocaleString()}.\n\n` +
                            '¿Deseas cargar el borrador y continuar donde lo dejaste?'
                        );

                        if (loadDraftConfirm) {
                            questionText.value = draftData.questionText || '';
                            document.getElementById('orderInput').value = draftData.order || '';

                            // Cargar respuestas
                            draftData.answers?.forEach((answer, index) => {
                                if (index < document.querySelectorAll('.answer-text-input').length) {
                                    document.querySelectorAll('.answer-text-input')[index].value = answer.text || '';
                                    if (document.querySelectorAll('.correct-checkbox')[index]) {
                                        document.querySelectorAll('.correct-checkbox')[index].checked = answer.isCorrect || false;
                                    }
                                }
                            });

                            validateAnswers();
                            updateCharCount();
                        }
                    }
                }
            } catch (error) {
                console.error('Error cargando borrador:', error);
            }
        }

        // Limpiar borrador al enviar exitosamente
        window.addEventListener('beforeunload', function () {
            // Solo limpiar si se está enviando el formulario
            if (document.querySelector('#submitBtn .fa-spinner')) {
                localStorage.removeItem('pacho_question_draft');
            }
        });

        // Event listeners para auto-save
        document.addEventListener('input', autoSaveDraft);
        document.addEventListener('change', autoSaveDraft);

        // Inicializar
        suggestNextOrder();
        loadDraft();
        validateAnswers();

        // Tip tooltip
        setTimeout(() => {
            const tips = [
                'Tip: Usa Ctrl+Enter para enviar cuando esté listo',
                'Tip: Usa Ctrl+N para agregar una nueva respuesta',
                'Tip: El sistema guarda borradores automáticamente'
            ];

            console.log('💡 ' + tips[Math.floor(Math.random() * tips.length)]);
        }, 2000);
    });
</script>